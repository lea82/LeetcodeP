/*
Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Example 1:
Given nums = [1, -1, 5, -2, 3], k = 3,
return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)

Example 2:
Given nums = [-2, -1, 2, 1], k = 1,
return 2. (because the subarray [-1, 2] sums to 1 and is the longest)

Follow Up:
Can you do it in O(n) time?

Hide Company Tags Palantir
Hide Tags Hash Table
Show Similar Problems

*/



public class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        int sum=0, max=0;
        HashMap<Integer, Integer> h = new HashMap<Integer, Integer>();
        for (int i = 0; i<nums.length; i++){
            sum += nums[i]; //till i, sum is the sum of elments from 0 to i; 
            if (sum == k) {
                max = i+1;
            }
            else if (h.containsKey(sum-k)){
                max = Math.max(max, i - h.get(sum - k)); //i - i1 is the subarray that sums to k.
            }
            if (!h.containsKey(sum)){
                h.put(sum,i);//hashmap maps the sum of elements from 0 till i to index i. keep the left most index in the hashmap
            }
        }
        return max;
    }
}
